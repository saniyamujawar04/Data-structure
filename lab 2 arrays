1. Write a program to read an integer 1D array containing 8 bits (0s, 1s)
of an unsigned binary integer. The program should print the decimal
value for the integer.
ALGORITHM:
Step1: Start
Step2: Declare the varibales
Step3: Input the binary arrya
Step4: Convert the binary to decimal
Step5: print the result
Step6: End

CODE:
#include <stdio.h>

int binaryToDecimal(int binaryArray[]) {
int decimal = 0;

// Calculate decimal value
int i;
for (i = 7; i >= 0; i--) {
decimal = decimal * 2 + binaryArray[i];
}

return decimal;
}

int main() {
// Declare an array to store the 8 bits
int binaryArray[8];

// Read 8 bits of binary input
printf("Enter an 8-bit binary number (enter one bit at a time, starting from the
least significant bit):\n");

int i;
for (i = 0; i < 8; i++) {
scanf("%1d", &binaryArray[i]);
}

// Call the function to convert binary to decimal
int decimalValue = binaryToDecimal(binaryArray);

// Print the decimal value
printf("Decimal equivalent: %d\n", decimalValue);

return 0;
}

OUTPUT:

2. Currency notes are available in the following seven denominations: Rs. 1,
Rs. 2, Rs. 5, Rs. 10, Rs. 20, Rs.50, and Rs. 100.
You will first read an integer array (named purse [7]) of seven elements,
where the array elements represents the number of notes of each
denomination (in increasing order of denomination) available with you. You
are also given an amount of money to be paid using these notes. The amount
will be less than Rs. 1000. You have to pay the amount using minimum
number of notes. Print the number of notes of each denomination which you
will use to pay the amount. If the amount cannot be paid using the available
notes, print “Failed to Pay”.

ALGORITHM:
Step1: Start
Step2: Sort the array of coins in decreasing order.
Step3: Initialize ans vector as empty.
Step4: Find the largest denomination that is smaller than remaining amount and
while it is smaller than the remaining amount:
Step5: Add found denomination to ans. Subtract value of found denomination from
amount.
Step6: If amount becomes 0, then print ans.
Step: End

CODE:
#include <stdio.h>

void payAmount(int purse[], int amount) {
int denominations[] = {100, 50, 20, 10, 5, 2, 1};
int notesUsed[7] = {0};

printf("Denomination\tNumber of Notes\n");

for (int i = 0; i < 7; i++) {
notesUsed[i] = amount / denominations[i];
if (notesUsed[i] > purse[i]) {
notesUsed[i] = purse[i];
}

amount -= notesUsed[i] * denominations[i];
purse[i] -= notesUsed[i];

printf("Rs. %d\t\t%d\n", denominations[i], notesUsed[i]);
}

if (amount == 0) {
printf("Payment successful.\n");
} else {
printf("Failed to Pay\n");

}
}

int main() {
int purse[7];
int denominations[] = {100, 50, 20, 10, 5, 2, 1}; // Declaration of denominations
array

printf("Enter the number of notes for each denomination:\n");

for (int i = 0; i < 7; i++) {
printf("Rs. %d: ", (i == 6) ? 1 : denominations[i]);
scanf("%d", &purse[i]);
}

int amount;
printf("Enter the amount to be paid (less than Rs. 1000): ");
scanf("%d", &amount);

if (amount < 1 || amount >= 1000) {
printf("Invalid amount.\n");
} else {
payAmount(purse, amount);
}

return 0;

}
OUTPUT:

3 .Write functions to perform the following operations with two-dimensional
arrays.
i) Reading any two dimensional array elements.
ii) Finding maximum and standard deviation of array elements.
iii) Printing the transpose of a matrix
ALGORITHM:
Step1: Declare variables for the array dimensions (rows and columns).
Step2: Declare the two-dimensional array using the specified dimensions.
Step3: Use a nested loop to iterate through each row and column of the array.
Step4: Inside the nested loop, prompt the user to enter the value for the current element.
Step5: Read the value from the user and store it in the corresponding array element.

Step6: End

CODE:
#include <stdio.h>
#include <math.h>

#define ROWS 3
#define COLS 3

void readArray(int arr[ROWS][COLS]) {
printf("Enter elements of the array:\n");
for (int i = 0; i < ROWS; i++) {
for (int j = 0; j < COLS; j++) {
printf("Enter element at position (%d, %d): ", i+1, j+1);
scanf("%d", &arr[i][j]);
}
}
}

int findMax(int arr[ROWS][COLS]) {
int max = arr[0][0];
for (int i = 0; i < ROWS; i++) {

for (int j = 0; j < COLS; j++) {
if (arr[i][j] > max) {
max = arr[i][j];
}
}
}
return max;
}

float findStandardDeviation(int arr[ROWS][COLS]) {
float sum = 0.0, mean, variance = 0.0;

// Calculate mean
for (int i = 0; i < ROWS; i++) {
for (int j = 0; j < COLS; j++) {
sum += arr[i][j];
}
}
mean = sum / (ROWS * COLS);

// Calculate variance

for (int i = 0; i < ROWS; i++) {
for (int j = 0; j < COLS; j++) {
variance += pow(arr[i][j] - mean, 2);
}
}
variance /= (ROWS * COLS);

// Calculate standard deviation
return sqrt(variance);
}

void printTranspose(int arr[ROWS][COLS]) {
printf("Transpose of the matrix:\n");
for (int i = 0; i < COLS; i++) {
for (int j = 0; j < ROWS; j++) {
printf("%d\t", arr[j][i]);
}
printf("\n");
}
}

int main() {
int array[ROWS][COLS];

// Read array elements
readArray(array);

// Find and print maximum element
int maxElement = findMax(array);
printf("Maximum element: %d\n", maxElement);

// Find and print standard deviation
float stdDeviation = findStandardDeviation(array);
printf("Standard Deviation: %.2f\n", stdDeviation);

// Print transpose of the matrix
printTranspose(array);

return 0;
}
